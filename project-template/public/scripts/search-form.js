import { renderBlock } from './lib.js';
function getDateForInput(date, shiftByDays, shiftByMonths) {
    let newDate;
    if (typeof (date) !== 'string') {
        newDate = new Date(date.getFullYear(), date.getMonth() + 1 + (shiftByMonths ? shiftByMonths : 0), shiftByDays === 'lastDay' ? 0 : date.getDate() + (shiftByDays ? shiftByDays : 0));
    }
    else {
        const dateArray = date.split('-');
        newDate = new Date(Number(dateArray[0]), Number(dateArray[1]) + (shiftByMonths ? shiftByMonths : 0), shiftByDays === 'lastDay' ? 0 : Number(dateArray[2]) + (shiftByDays ? shiftByDays : 0));
    }
    const YYYY = newDate.getFullYear();
    const MM = newDate.getMonth() + 1;
    const DD = newDate.getDate();
    return `${YYYY}-${MM < 10 ? 0 : ''}${MM}-${DD < 10 ? 0 : ''}${DD}`;
}
console.log(getDateForInput(new Date()));
// Найдите функцию renderSearchFormBlock и доработайте её следующим образом. Функция
// должна принимать дату въезда и дату выезда. При этом минимальная дата, которую можно
// выбрать это дата сегодняшнего дня, а максимальная дата - последний день следующего
// месяца. Будем считать это ограничениями сервиса. По умолчанию поля заполняются
// следующим образом. Дата въезда это следующий день от текущей даты. Дата выезда - плюс
// два дня от даты въезда.
export function renderSearchFormBlock(checkin, checkout) {
    const max = getDateForInput(new Date(), 'lastDay', 1);
    const min = getDateForInput(new Date());
    let dayStart = checkin ? getDateForInput(checkin) : getDateForInput(new Date(), 1);
    let dayFinish = checkout ? getDateForInput(checkout) : getDateForInput(dayStart, 2);
    renderBlock('search-form-block', `
    <form>
      <fieldset class="search-filedset">
        <div class="row">
          <div>
            <label for="city">Город</label>
            <input id="city" type="text" disabled value="Санкт-Петербург" />
            <input type="hidden" disabled value="59.9386,30.3141" />
          </div>
          <!--<div class="providers">
            <label><input type="checkbox" name="provider" value="homy" checked /> Homy</label>
            <label><input type="checkbox" name="provider" value="flat-rent" checked /> FlatRent</label>
          </div>--!>
        </div>
        <div class="row">
          <div>
            <label for="check-in-date">Дата заезда</label>
            <input id="check-in-date" type="date" value="${dayStart}" min="${min}" max="${max}" name="checkin" />
          </div>
          <div>
            <label for="check-out-date">Дата выезда</label>
            <input id="check-out-date" type="date" value="${dayFinish}" min="${min}" max="${max}" name="checkout" />
          </div>
          <div>
            <label for="max-price">Макс. цена суток</label>
            <input id="max-price" type="text" value="" name="price" class="max-price" />
          </div>
          <div>
            <div><button>Найти</button></div>
          </div>
        </div>
      </fieldset>
    </form>
    `);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZvcm0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VhcmNoLWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQU90QyxTQUFTLGVBQWUsQ0FBQyxJQUFtQixFQUFFLFdBQWdDLEVBQzVFLGFBQXNCO0lBQ3RCLElBQUksT0FBYSxDQUFDO0lBQ2xCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUM5QixPQUFPLEdBQUcsSUFBSSxJQUFJLENBQ2hCLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFDbEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDekQsV0FBVyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyRjtTQUFNO1FBQ0wsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQ2hCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMxRCxXQUFXLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzNGO0lBQ0QsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ25DLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbEMsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLE9BQU8sR0FBRyxJQUFJLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFBO0FBRXBFLENBQUM7QUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN6QyxvRkFBb0Y7QUFDcEYsdUZBQXVGO0FBQ3ZGLHFGQUFxRjtBQUNyRixpRkFBaUY7QUFDakYsd0ZBQXdGO0FBQ3hGLDBCQUEwQjtBQUUxQixNQUFNLFVBQVUscUJBQXFCLENBQUMsT0FBYyxFQUFFLFFBQWU7SUFDbkUsTUFBTSxHQUFHLEdBQUcsZUFBZSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELE1BQU0sR0FBRyxHQUFHLGVBQWUsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7SUFDeEMsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ25GLElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXBGLFdBQVcsQ0FDVCxtQkFBbUIsRUFDbkI7Ozs7Ozs7Ozs7Ozs7Ozs7OzJEQWlCdUQsUUFBUSxVQUFVLEdBQUcsVUFBVSxHQUFHOzs7OzREQUlqQyxTQUFTLFVBQVUsR0FBRyxVQUFVLEdBQUc7Ozs7Ozs7Ozs7OztLQVkxRixDQUNGLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyQmxvY2sgfSBmcm9tICcuL2xpYi5qcydcblxuaW50ZXJmYWNlIFNoaWZ0IHtcbiAgQnlEYXlzOiBudW1iZXIgfCAnbGFzdERheSc7XG4gIEJ5TW9udGhzPzogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiBnZXREYXRlRm9ySW5wdXQoZGF0ZTogRGF0ZSB8IHN0cmluZywgc2hpZnRCeURheXM/OiBudW1iZXIgfCAnbGFzdERheScsXG4gIHNoaWZ0QnlNb250aHM/OiBudW1iZXIpOiBzdHJpbmcge1xuICBsZXQgbmV3RGF0ZTogRGF0ZTtcbiAgaWYgKHR5cGVvZiAoZGF0ZSkgIT09ICdzdHJpbmcnKSB7XG4gICAgbmV3RGF0ZSA9IG5ldyBEYXRlKFxuICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgZGF0ZS5nZXRNb250aCgpICsgMSArIChzaGlmdEJ5TW9udGhzID8gc2hpZnRCeU1vbnRocyA6IDApLFxuICAgICAgc2hpZnRCeURheXMgPT09ICdsYXN0RGF5JyA/IDAgOiBkYXRlLmdldERhdGUoKSArIChzaGlmdEJ5RGF5cyA/IHNoaWZ0QnlEYXlzIDogMCkpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGRhdGVBcnJheSA9IGRhdGUuc3BsaXQoJy0nKTtcbiAgICBuZXdEYXRlID0gbmV3IERhdGUoXG4gICAgICBOdW1iZXIoZGF0ZUFycmF5WzBdKSxcbiAgICAgIE51bWJlcihkYXRlQXJyYXlbMV0pICsgKHNoaWZ0QnlNb250aHMgPyBzaGlmdEJ5TW9udGhzIDogMCksXG4gICAgICBzaGlmdEJ5RGF5cyA9PT0gJ2xhc3REYXknID8gMCA6IE51bWJlcihkYXRlQXJyYXlbMl0pICsgKHNoaWZ0QnlEYXlzID8gc2hpZnRCeURheXMgOiAwKSk7XG4gIH1cbiAgY29uc3QgWVlZWSA9IG5ld0RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgY29uc3QgTU0gPSBuZXdEYXRlLmdldE1vbnRoKCkgKyAxO1xuICBjb25zdCBERCA9IG5ld0RhdGUuZ2V0RGF0ZSgpO1xuICByZXR1cm4gYCR7WVlZWX0tJHtNTSA8IDEwID8gMCA6ICcnfSR7TU19LSR7REQgPCAxMCA/IDAgOiAnJ30ke0REfWBcblxufVxuXG5jb25zb2xlLmxvZyhnZXREYXRlRm9ySW5wdXQobmV3IERhdGUoKSkpO1xuLy8g0J3QsNC50LTQuNGC0LUg0YTRg9C90LrRhtC40Y4gcmVuZGVyU2VhcmNoRm9ybUJsb2NrINC4INC00L7RgNCw0LHQvtGC0LDQudGC0LUg0LXRkSDRgdC70LXQtNGD0Y7RidC40Lwg0L7QsdGA0LDQt9C+0LwuINCk0YPQvdC60YbQuNGPXG4vLyDQtNC+0LvQttC90LAg0L/RgNC40L3QuNC80LDRgtGMINC00LDRgtGDINCy0YrQtdC30LTQsCDQuCDQtNCw0YLRgyDQstGL0LXQt9C00LAuINCf0YDQuCDRjdGC0L7QvCDQvNC40L3QuNC80LDQu9GM0L3QsNGPINC00LDRgtCwLCDQutC+0YLQvtGA0YPRjiDQvNC+0LbQvdC+XG4vLyDQstGL0LHRgNCw0YLRjCDRjdGC0L4g0LTQsNGC0LAg0YHQtdCz0L7QtNC90Y/RiNC90LXQs9C+INC00L3Rjywg0LAg0LzQsNC60YHQuNC80LDQu9GM0L3QsNGPINC00LDRgtCwIC0g0L/QvtGB0LvQtdC00L3QuNC5INC00LXQvdGMINGB0LvQtdC00YPRjtGJ0LXQs9C+XG4vLyDQvNC10YHRj9GG0LAuINCR0YPQtNC10Lwg0YHRh9C40YLQsNGC0Ywg0Y3RgtC+INC+0LPRgNCw0L3QuNGH0LXQvdC40Y/QvNC4INGB0LXRgNCy0LjRgdCwLiDQn9C+INGD0LzQvtC70YfQsNC90LjRjiDQv9C+0LvRjyDQt9Cw0L/QvtC70L3Rj9GO0YLRgdGPXG4vLyDRgdC70LXQtNGD0Y7RidC40Lwg0L7QsdGA0LDQt9C+0LwuINCU0LDRgtCwINCy0YrQtdC30LTQsCDRjdGC0L4g0YHQu9C10LTRg9GO0YnQuNC5INC00LXQvdGMINC+0YIg0YLQtdC60YPRidC10Lkg0LTQsNGC0YsuINCU0LDRgtCwINCy0YvQtdC30LTQsCAtINC/0LvRjtGBXG4vLyDQtNCy0LAg0LTQvdGPINC+0YIg0LTQsNGC0Ysg0LLRitC10LfQtNCwLlxuXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVyU2VhcmNoRm9ybUJsb2NrKGNoZWNraW4/OiBEYXRlLCBjaGVja291dD86IERhdGUpIHtcbiAgY29uc3QgbWF4ID0gZ2V0RGF0ZUZvcklucHV0KG5ldyBEYXRlKCksICdsYXN0RGF5JywgMSk7XG4gIGNvbnN0IG1pbiA9IGdldERhdGVGb3JJbnB1dChuZXcgRGF0ZSgpKTtcbiAgbGV0IGRheVN0YXJ0ID0gY2hlY2tpbiA/IGdldERhdGVGb3JJbnB1dChjaGVja2luKSA6IGdldERhdGVGb3JJbnB1dChuZXcgRGF0ZSgpLCAxKTtcbiAgbGV0IGRheUZpbmlzaCA9IGNoZWNrb3V0ID8gZ2V0RGF0ZUZvcklucHV0KGNoZWNrb3V0KSA6IGdldERhdGVGb3JJbnB1dChkYXlTdGFydCwgMik7XG5cbiAgcmVuZGVyQmxvY2soXG4gICAgJ3NlYXJjaC1mb3JtLWJsb2NrJyxcbiAgICBgXG4gICAgPGZvcm0+XG4gICAgICA8ZmllbGRzZXQgY2xhc3M9XCJzZWFyY2gtZmlsZWRzZXRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2l0eVwiPtCT0L7RgNC+0LQ8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPVwiY2l0eVwiIHR5cGU9XCJ0ZXh0XCIgZGlzYWJsZWQgdmFsdWU9XCLQodCw0L3QutGCLdCf0LXRgtC10YDQsdGD0YDQs1wiIC8+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIGRpc2FibGVkIHZhbHVlPVwiNTkuOTM4NiwzMC4zMTQxXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8IS0tPGRpdiBjbGFzcz1cInByb3ZpZGVyc1wiPlxuICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicHJvdmlkZXJcIiB2YWx1ZT1cImhvbXlcIiBjaGVja2VkIC8+IEhvbXk8L2xhYmVsPlxuICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicHJvdmlkZXJcIiB2YWx1ZT1cImZsYXQtcmVudFwiIGNoZWNrZWQgLz4gRmxhdFJlbnQ8L2xhYmVsPlxuICAgICAgICAgIDwvZGl2Pi0tIT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNoZWNrLWluLWRhdGVcIj7QlNCw0YLQsCDQt9Cw0LXQt9C00LA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPVwiY2hlY2staW4tZGF0ZVwiIHR5cGU9XCJkYXRlXCIgdmFsdWU9XCIke2RheVN0YXJ0fVwiIG1pbj1cIiR7bWlufVwiIG1heD1cIiR7bWF4fVwiIG5hbWU9XCJjaGVja2luXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImNoZWNrLW91dC1kYXRlXCI+0JTQsNGC0LAg0LLRi9C10LfQtNCwPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD1cImNoZWNrLW91dC1kYXRlXCIgdHlwZT1cImRhdGVcIiB2YWx1ZT1cIiR7ZGF5RmluaXNofVwiIG1pbj1cIiR7bWlufVwiIG1heD1cIiR7bWF4fVwiIG5hbWU9XCJjaGVja291dFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJtYXgtcHJpY2VcIj7QnNCw0LrRgS4g0YbQtdC90LAg0YHRg9GC0L7QujwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCJtYXgtcHJpY2VcIiB0eXBlPVwidGV4dFwiIHZhbHVlPVwiXCIgbmFtZT1cInByaWNlXCIgY2xhc3M9XCJtYXgtcHJpY2VcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2PjxidXR0b24+0J3QsNC50YLQuDwvYnV0dG9uPjwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZmllbGRzZXQ+XG4gICAgPC9mb3JtPlxuICAgIGBcbiAgKVxufVxuIl19